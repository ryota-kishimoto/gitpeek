name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: macos-latest
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Build Release
        run: |
          set -e  # Exit on error
          
          # Clean build
          echo "🧹 Cleaning previous builds..."
          xcodebuild clean -scheme GitPeek \
            -destination 'platform=macOS' || {
            echo "❌ Failed to clean build"
            exit 1
          }
          
          # Build the app (Universal Binary for both Intel and Apple Silicon)
          echo "🔨 Building Universal Binary..."
          xcodebuild -scheme GitPeek \
            -configuration Release \
            -derivedDataPath build \
            -destination 'platform=macOS' \
            ARCHS="arm64 x86_64" \
            ONLY_ACTIVE_ARCH=NO \
            build || {
            echo "❌ Build failed"
            exit 1
          }
          
          echo "✅ Build successful"
            
      - name: Create App Bundle
        run: |
          # Find the built executable
          EXECUTABLE_PATH="build/Build/Products/Release/GitPeek"
          
          # Create app bundle structure
          mkdir -p "GitPeek.app/Contents/MacOS"
          mkdir -p "GitPeek.app/Contents/Resources"
          mkdir -p "GitPeek.app/Contents/Frameworks"
          
          # Copy executable
          cp "$EXECUTABLE_PATH" "GitPeek.app/Contents/MacOS/GitPeek"
          
          # Copy Sparkle framework
          if [ -d "build/Build/Products/Release/Sparkle.framework" ]; then
            echo "📦 Copying Sparkle framework..."
            cp -R "build/Build/Products/Release/Sparkle.framework" "GitPeek.app/Contents/Frameworks/"
          else
            echo "⚠️ Sparkle framework not found, checking alternative locations..."
            # Try to find Sparkle in build directory
            find build -name "Sparkle.framework" -type d | head -1 | xargs -I {} cp -R {} "GitPeek.app/Contents/Frameworks/"
          fi
          
          # Create Info.plist
          VERSION="${{ github.ref_name }}"
          cat > "GitPeek.app/Contents/Info.plist" << PLIST_EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>GitPeek</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon</string>
              <key>CFBundleIdentifier</key>
              <string>com.gitpeek.GitPeek</string>
              <key>CFBundleName</key>
              <string>GitPeek</string>
              <key>CFBundleDisplayName</key>
              <string>GitPeek</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>${VERSION}</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSMinimumSystemVersion</key>
              <string>13.0</string>
              <key>LSUIElement</key>
              <true/>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>SUFeedURL</key>
              <string>https://raw.githubusercontent.com/ryota-kishimoto/gitpeek/main/appcast.xml</string>
              <key>SUEnableAutomaticChecks</key>
              <true/>
              <key>SUScheduledCheckInterval</key>
              <integer>86400</integer>
              <key>SUPublicEDKey</key>
              <string>VuF1RDfpkALoNuceWkjdqQC8tKsTRcPEBgWnD1iIkOY=</string>
          </dict>
          </plist>
          PLIST_EOF
          
          # Make executable
          chmod +x "GitPeek.app/Contents/MacOS/GitPeek"
          
          # Sign the app (ad-hoc signing for now)
          codesign --force --deep --sign - "GitPeek.app"
          
      - name: Create DMG
        run: |
          # Create a temporary directory for DMG contents
          mkdir -p dmg_contents
          
          # Copy the app bundle
          cp -R GitPeek.app dmg_contents/
          
          # Create symbolic link to Applications folder
          ln -s /Applications dmg_contents/Applications
          
          # Create DMG with nice layout
          hdiutil create -volname "GitPeek" \
            -srcfolder dmg_contents \
            -ov -format UDZO \
            -fs HFS+ \
            GitPeek-${{ github.ref_name }}.dmg
            
          # Generate SHA256
          shasum -a 256 GitPeek-${{ github.ref_name }}.dmg > GitPeek-${{ github.ref_name }}.dmg.sha256
          
      - name: Download and Setup Sparkle
        run: |
          curl -L https://github.com/sparkle-project/Sparkle/releases/latest/download/Sparkle-2.7.1.tar.xz -o Sparkle.tar.xz
          tar -xf Sparkle.tar.xz
          
      - name: Sign DMG with Sparkle
        id: sparkle_sign
        run: |
          set -e  # Exit on error
          
          # Check if private key exists
          if [ -z "${{ secrets.SPARKLE_PRIVATE_KEY }}" ]; then
            echo "❌ SPARKLE_PRIVATE_KEY secret not configured"
            exit 1
          fi
          
          # Sign the DMG
          echo "✍️ Signing DMG with Sparkle..."
          SIGNATURE=$(./bin/sign_update -s "${{ secrets.SPARKLE_PRIVATE_KEY }}" "GitPeek-${{ github.ref_name }}.dmg" 2>&1 | tail -1)
          
          # Verify signature was generated
          if [ -z "$SIGNATURE" ] || [[ "$SIGNATURE" == *"error"* ]]; then
            echo "❌ Failed to generate Sparkle signature"
            echo "Signature output: $SIGNATURE"
            exit 1
          fi
          
          echo "✅ Signature generated: ${SIGNATURE:0:20}..."
          echo "signature=$SIGNATURE" >> $GITHUB_OUTPUT
          
          # Get file size
          FILE_SIZE=$(stat -f%z "GitPeek-${{ github.ref_name }}.dmg")
          if [ -z "$FILE_SIZE" ]; then
            echo "❌ Failed to get DMG file size"
            exit 1
          fi
          
          echo "📏 File size: $FILE_SIZE bytes"
          echo "file_size=$FILE_SIZE" >> $GITHUB_OUTPUT
          
      - name: Update appcast.xml
        run: |
          # Checkout with write permissions
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create appcast entry
          VERSION="${{ github.ref_name }}"
          SIGNATURE="${{ steps.sparkle_sign.outputs.signature }}"
          FILE_SIZE="${{ steps.sparkle_sign.outputs.file_size }}"
          
          # Create new appcast entry
          cat > new_item.xml << EOF
          <item>
              <title>Version \${VERSION#v}</title>
              <description><![CDATA[
                  <h2>What's New</h2>
                  <p>See release notes on GitHub</p>
              ]]></description>
              <pubDate>\$(date -R)</pubDate>
              <sparkle:version>\${VERSION#v}</sparkle:version>
              <sparkle:shortVersionString>\${VERSION#v}</sparkle:shortVersionString>
              <sparkle:minimumSystemVersion>13.0</sparkle:minimumSystemVersion>
              <enclosure 
                  url="https://github.com/ryota-kishimoto/gitpeek/releases/download/\${VERSION}/GitPeek-\${VERSION}.dmg"
                  sparkle:edSignature="\${SIGNATURE}"
                  length="\${FILE_SIZE}"
                  type="application/octet-stream" />
          </item>
          EOF
          
          # Insert new item into appcast.xml (before </channel>)
          if [ -f appcast.xml ]; then
            # Remove existing item for this version if it exists
            sed -i.bak "/<item>.*Version \${VERSION#v}/,/<\/item>/d" appcast.xml
            
            # Insert new item before </channel>
            awk '/<\/channel>/ { while (getline line < "new_item.xml") print line } 1' appcast.xml > appcast.xml.tmp
            mv appcast.xml.tmp appcast.xml
          fi
          
          # Commit and push appcast.xml
          git add appcast.xml
          git commit -m "chore: update appcast.xml for ${VERSION}" || echo "No changes to commit"
          git push origin main || echo "Failed to push - may need manual update"
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "First release" > release_notes.md
          else
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            
            # Get commit messages between tags
            git log --pretty=format:"- %s" $PREV_TAG..HEAD >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "1. Download \`GitPeek-${{ github.ref_name }}.dmg\`" >> release_notes.md
          echo "2. Open the DMG file" >> release_notes.md
          echo "3. Drag GitPeek to your Applications folder" >> release_notes.md
          echo "4. Launch GitPeek from Applications" >> release_notes.md
          echo "5. Look for the folder icon in your menu bar" >> release_notes.md
          echo "" >> release_notes.md
          echo "## SHA256 Checksum" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          cat GitPeek-${{ github.ref_name }}.dmg.sha256 >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          body_path: release_notes.md
          files: |
            GitPeek-${{ github.ref_name }}.dmg
            GitPeek-${{ github.ref_name }}.dmg.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}