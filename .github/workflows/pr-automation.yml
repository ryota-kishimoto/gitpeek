name: PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]
  pull_request_target:
    types: [opened]

jobs:
  # PRにラベルを自動付与
  labeler:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/labeler@v6
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          sync-labels: true

  # PRサイズによるラベル付け
  size-label:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/XS'
          xs_max_size: '10'
          s_label: 'size/S'
          s_max_size: '100'
          m_label: 'size/M'
          m_max_size: '500'
          l_label: 'size/L'
          l_max_size: '1000'
          xl_label: 'size/XL'
          fail_if_xl: false
          
  # PR作成者を自動アサイン
  auto-assign:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: hmarr/auto-assign-action@v3
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

  # WIPラベルの管理
  wip-label:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) return;
            
            const isWIP = pr.title.match(/^\[?WIP\]?:?\s/i) || pr.draft;
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            
            const hasWIPLabel = labels.data.some(label => label.name === 'WIP');
            
            if (isWIP && !hasWIPLabel) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['WIP']
              });
            } else if (!isWIP && hasWIPLabel) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                name: 'WIP'
              });
            }